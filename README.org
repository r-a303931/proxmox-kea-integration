#+TITLE: Proxmox Kea Cloud-init Integration

The goal of this project is simple: use cloud-init configuration as a user, but still assign IP addresses on systems that do not support cloud-init to enable further customization via Ansible

* Theory
This integration reads Proxmox cloud-init configuration to gather MAC address and desired IP address mappings and creates Docker containers that host a Kea DHCP server to issue said IP address to the VM with the correct address.

As an example, reading ~/etc/pve/local/qemu-server/1000.conf~ can contain the following content:

#+BEGIN_SRC yaml
net0: virtio=52:54:00:9e:cc:1e,bridge=vmbr0,firewall=0
ipconfig0: gw=192.168.100.1,ip=192.168.100.20/24
#+END_SRC

Create the file ~./conf/kea-dhcp4.conf~:

#+BEGIN_SRC json
{
    "Dhcp4": {
        "interfaces-config": {
            "interfaces": ["eth0"]
        },
        "option-data": [{"name": "routers", "data": "192.168.100.1"}],
        "lease-database": {
            "type": "memfile",
            "name": "./conf/kea-leases.csv"
        },
        "reservations": [
            {
                "hw-address": "52:54:00:9e:cc:1e",
                "ip-address": "192.168.100.20",
            }
        ],
        "subnet4": [
            {
                "pools": [{ "pool": "192.168.100.253 - 192.168.100.254" }],
                "id": 1,
                "subnet": "192.168.100.0/24"
            }
        ]
    }
}
#+END_SRC

Create the file ~./conf/kea-leases.csv~:

#+BEGIN_SRC csv
address,hwaddr,client_id,valid_lifetime,expire,subnet_id,fqdn_fwd,fqdn_rev,hostname,state,user_context,pool_id
#+END_SRC

Then run the following Docker commands:

#+BEGIN_SRC shell
ip netns add kea_vmbr0
ip link add kh_vmbr0 type veth peer kn_vmbr0
ip link set kn_vmbr0 netns kea_vmbr0
ip -n kea_vmbr0 link set lo up
ip -n kea_vmbr0 link set kn_vmbr0 up
ip -n kea_vmbr0 addr add 192.168.100.254/24 brd + dev kn_vmbr0
ip link set kh_vmbr0 master vmbr0
ip link set kh_vmbr0 up

ip netns exec kea_vmbr0 kea -c conf/kea-dhcp4.conf
#+END_SRC

When the VM is powered up, it will be issued the correct IP address

However, this involves running code and the Docker daemon directly on Proxmox. While this is meant to be a integration, it ideal to keep as much of this isolated as possible. To that end, it's possible to run this code in a container on Proxmox that has the following configuration in ~/etc/pve/local/lxc/<ID>.conf~:

#+BEGIN_SRC yaml
features: nesting=1
unprivileged: 0
mp0: /etc/pve,mp=/etc/pve
lxc.net.0.type: none
#+END_SRC

This has been tested with the standard Proxmox Debian 12 container template.

With those options, it is possible to start the container, install Docker, then install this integration

** Firewalls
If the VM has a firewall enabled, the bridge to attach to is not the one specified but is instead a bridge of the form ~fwbr<ID>i<interface index>~.

For example, using configuration like the following for VM ID 1000:

#+BEGIN_SRC yaml
net0: virtio=52:54:00:9e:cc:1e,bridge=vmbr0,firewall=1
ipconfig0: gw=192.168.100.1,ip=192.168.100.20/24
#+END_SRC

The bridge to attach to will not actually be ~vmbr0~ but in fact ~fwbr1000i0~.

This is the case regardless of whether or not there is a VLAN tag associated with the interface

** VLANs
VLANs are a little simpler, because instead of a veth pair it is only necessary to create a VLAN subinterface

Given the following configuration:

#+BEGIN_SRC yaml
net0: virtio=52:54:00:9e:cc:1e,bridge=vmbr0,tag=5
ipconfig0: gw=192.168.100.1,ip=192.168.100.20/24
#+END_SRC

The commands to set up the ~kea_vmbr0.5~ namespace are:

#+BEGIN_SRC shell
ip netns add kea_vmbr0.5
ip link add vmbr0.5 link vmbr0 type vlan id 5
ip link set vmbr0.5 netns kea_vmbr0.5
ip -n kea_vmbr0.5 link set lo up
ip -n kea_vmbr0.5 link set vmbr0.5 up
ip -n kea_vmbr0.5 addr add 192.168.100.254/24 brd + dev vmbr0.5

ip netns exec kea_vmbr0.5 kea -c conf/kea-dhcp4.conf
#+END_SRC
